# Script PowerShell pour pousser le projet E-COMPTA-IA vers GitHub
# Ce script remplace compl√®tement le contenu du repository distant

# Configuration des variables
$LOCAL_PATH = "C:\Users\HP\Documents\GitHub\E_COMPTA_IA\E_COMPTA_IA_INTERNATIONAL\E-COMPTA-IA-CLEAN"
$REMOTE_REPO = "https://github.com/LnDevAi/E-COMPTA-IA-CLEAN.git"
$BRANCH_NAME = "main"

Write-Host "üöÄ D√©but du processus de push vers GitHub" -ForegroundColor Green
Write-Host "üìÅ R√©pertoire local: $LOCAL_PATH" -ForegroundColor Yellow
Write-Host "üåê Repository distant: $REMOTE_REPO" -ForegroundColor Yellow

# V√©rifier si le r√©pertoire local existe
if (-not (Test-Path $LOCAL_PATH)) {
    Write-Host "‚ùå Erreur: Le r√©pertoire local n'existe pas: $LOCAL_PATH" -ForegroundColor Red
    exit 1
}

# Se d√©placer dans le r√©pertoire du projet
Set-Location $LOCAL_PATH
Write-Host "üìç Positionnement dans le r√©pertoire du projet" -ForegroundColor Cyan

# V√©rifier si c'est un repository Git
if (-not (Test-Path ".git")) {
    Write-Host "üîß Initialisation du repository Git local..." -ForegroundColor Yellow
    git init
    Write-Host "‚úÖ Repository Git initialis√©" -ForegroundColor Green
}

# Configurer l'utilisateur Git si n√©cessaire
try {
    $gitUser = git config --global user.name
    $gitEmail = git config --global user.email
    
    if ([string]::IsNullOrEmpty($gitUser) -or [string]::IsNullOrEmpty($gitEmail)) {
        Write-Host "‚öôÔ∏è Configuration utilisateur Git requise..." -ForegroundColor Yellow
        $userName = Read-Host "Entrez votre nom d'utilisateur Git"
        $userEmail = Read-Host "Entrez votre email Git"
        
        git config --global user.name "$userName"
        git config --global user.email "$userEmail"
        Write-Host "‚úÖ Configuration utilisateur Git mise √† jour" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ö†Ô∏è Attention: Impossible de v√©rifier la configuration Git" -ForegroundColor Yellow
}

# Ajouter le remote origin (ou le mettre √† jour)
Write-Host "üîó Configuration du repository distant..." -ForegroundColor Cyan
try {
    git remote remove origin 2>$null
} catch {
    # Remote n'existe pas, pas de probl√®me
}

git remote add origin $REMOTE_REPO
Write-Host "‚úÖ Remote origin configur√©" -ForegroundColor Green

# Cr√©er un fichier .gitignore complet si inexistant
if (-not (Test-Path ".gitignore")) {
    Write-Host "üìù Cr√©ation du fichier .gitignore..." -ForegroundColor Yellow
    @"
# Dossiers de d√©pendances
node_modules/
target/
.mvn/
vendor/

# Fichiers de configuration locaux
.env
.env.local
.env.development
.env.production
*.properties.local

# Fichiers de build
dist/
build/
out/
*.jar
*.war

# Fichiers IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS g√©n√©r√©s
.DS_Store
Thumbs.db

# Logs
*.log
logs/

# Cache
.cache/
.parcel-cache/

# Fichiers temporaires
*.tmp
*.temp
"@ | Out-File -FilePath ".gitignore" -Encoding UTF8
    Write-Host "‚úÖ Fichier .gitignore cr√©√©" -ForegroundColor Green
}

# Ajouter tous les fichiers
Write-Host "üì¶ Ajout de tous les fichiers..." -ForegroundColor Cyan
git add .

# V√©rifier s'il y a des changements √† commiter
$status = git status --porcelain
if ([string]::IsNullOrEmpty($status)) {
    Write-Host "‚ÑπÔ∏è Aucun changement d√©tect√©" -ForegroundColor Yellow
} else {
    Write-Host "üìã Fichiers d√©tect√©s pour commit:" -ForegroundColor Yellow
    git status --short
}

# Cr√©er un commit avec timestamp
$commitMessage = "üöÄ D√©ploiement complet E-COMPTA-IA - $(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')"
Write-Host "üíæ Cr√©ation du commit: $commitMessage" -ForegroundColor Cyan
git commit -m "$commitMessage"

# Push avec force pour remplacer compl√®tement le contenu distant
Write-Host "üöÄ Push vers GitHub avec remplacement complet..." -ForegroundColor Cyan
Write-Host "‚ö†Ô∏è ATTENTION: Cette op√©ration va remplacer tout le contenu du repository distant!" -ForegroundColor Red

$confirmation = Read-Host "Voulez-vous continuer? (oui/non)"
if ($confirmation -eq "oui" -or $confirmation -eq "o" -or $confirmation -eq "y" -or $confirmation -eq "yes") {
    
    # Tentative de push normal d'abord
    Write-Host "üì§ Tentative de push normal..." -ForegroundColor Yellow
    $pushResult = git push -u origin $BRANCH_NAME 2>&1
    
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ö†Ô∏è Push normal √©chou√©, utilisation du push forc√©..." -ForegroundColor Yellow
        Write-Host "üîÑ Ex√©cution du push avec --force..." -ForegroundColor Cyan
        
        git push --force -u origin $BRANCH_NAME
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Push forc√© r√©ussi!" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Erreur lors du push forc√©" -ForegroundColor Red
            Write-Host "D√©tails de l'erreur:" -ForegroundColor Yellow
            git push --force -u origin $BRANCH_NAME
            exit 1
        }
    } else {
        Write-Host "‚úÖ Push normal r√©ussi!" -ForegroundColor Green
    }
    
    # Affichage des informations finales
    Write-Host "`nüéâ D√âPLOIEMENT TERMIN√â AVEC SUCC√àS!" -ForegroundColor Green
    Write-Host "üåê Votre projet est maintenant disponible sur: $REMOTE_REPO" -ForegroundColor Cyan
    Write-Host "üìä Statistiques du repository:" -ForegroundColor Yellow
    
    # Statistiques
    $fileCount = (Get-ChildItem -Recurse -File | Where-Object { $_.FullName -notlike "*\.git\*" }).Count
    $folderCount = (Get-ChildItem -Recurse -Directory | Where-Object { $_.FullName -notlike "*\.git\*" }).Count
    
    Write-Host "   Dossiers: $folderCount" -ForegroundColor White
    Write-Host "   Fichiers: $fileCount" -ForegroundColor White
    Write-Host "   Branche: $BRANCH_NAME" -ForegroundColor White
    
    # Afficher les derniers commits
    Write-Host "`nDerniers commits:" -ForegroundColor Yellow
    git log --oneline -5
    
} else {
    Write-Host "Operation annulee par l'utilisateur" -ForegroundColor Red
    exit 0
}

# Verification finale
Write-Host "`nVerification finale..." -ForegroundColor Cyan
$remoteInfo = git remote -v
Write-Host "Remote configure:" -ForegroundColor Yellow
Write-Host $remoteInfo -ForegroundColor White

Write-Host "`nScript termine avec succes!" -ForegroundColor Green
Write-Host "Conseil: Vous pouvez maintenant cloner votre projet depuis: $REMOTE_REPO" -ForegroundColor Cyan

# Pause pour voir les resultats
Write-Host "`nAppuyez sur une touche pour fermer..." -ForegroundColor Gray
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")