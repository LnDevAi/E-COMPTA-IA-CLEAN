package com.ecomptaia.sycebnl.service;

import com.ecomptaia.sycebnl.entity.SycebnlOrganization;
import com.ecomptaia.sycebnl.entity.SycebnlOrganization.AccountingSystem;
import com.ecomptaia.sycebnl.entity.SycebnlOrganization.ComplianceStatus;
import com.ecomptaia.sycebnl.entity.SycebnlOrganization.OrganizationType;
import com.ecomptaia.sycebnl.repository.SycebnlOrganizationRepository;
import com.ecomptaia.entity.Company;
import com.ecomptaia.repository.CompanyRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * Service pour la gestion des organisations SYCEBNL
 * Gère la conformité OHADA et les systèmes comptables
 */
@Service
@Transactional
@RequiredArgsConstructor
@Slf4j
public class SycebnlOrganizationService {
    
    private final SycebnlOrganizationRepository sycebnlOrganizationRepository;
    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(SycebnlOrganizationService.class);
    private final CompanyRepository companyRepository;

    /**
     * Créer une nouvelle organisation SYCEBNL
     */
    public SycebnlOrganization createOrganization(Long companyId, SycebnlOrganization organization) {
        log.info("Création d'une organisation SYCEBNL pour l'entreprise ID: {}", companyId);
        
        Company company = companyRepository.findById(companyId)
            .orElseThrow(() -> new RuntimeException("Company not found"));

        // Déterminer le système comptable approprié
        AccountingSystem accountingSystem = determineAccountingSystem(organization);
        // organization.setAccountingSystem(accountingSystem);
        // organization.setCompany(company);
        // organization.setMeetsNormalSystemCriteria(meetsNormalSystemCriteria(organization));
        // organization.setOhadaComplianceStatus(ComplianceStatus.UNDER_REVIEW);
        // organization.setCreatedAt(LocalDateTime.now());
        // organization.setUpdatedAt(LocalDateTime.now());

        SycebnlOrganization savedOrganization = sycebnlOrganizationRepository.save(organization);
        log.info("Organisation SYCEBNL créée avec succès");
        
        return savedOrganization;
    }

    /**
     * Mettre à jour une organisation SYCEBNL
     */
    public SycebnlOrganization updateOrganization(Long organizationId, SycebnlOrganization updatedOrganization) {
        log.info("Mise à jour de l'organisation SYCEBNL ID: {}", organizationId);
        
        SycebnlOrganization existingOrganization = sycebnlOrganizationRepository.findById(organizationId)
            .orElseThrow(() -> new RuntimeException("Organization not found"));

        // Mettre à jour les champs
        existingOrganization.setOrganizationName(updatedOrganization.getOrganizationName());
        existingOrganization.setLegalForm(updatedOrganization.getLegalForm());
        existingOrganization.setRegistrationNumber(updatedOrganization.getRegistrationNumber());
        existingOrganization.setTaxIdentificationNumber(updatedOrganization.getTaxIdentificationNumber());
        existingOrganization.setOrganizationType(updatedOrganization.getOrganizationType());
        existingOrganization.setFiscalYearStart(updatedOrganization.getFiscalYearStart());
        existingOrganization.setFiscalYearEnd(updatedOrganization.getFiscalYearEnd());
        existingOrganization.setBaseCurrency(updatedOrganization.getBaseCurrency());
        existingOrganization.setReportingCurrency(updatedOrganization.getReportingCurrency());
        existingOrganization.setAnnualRevenue(updatedOrganization.getAnnualRevenue());
        existingOrganization.setEmployeeCount(updatedOrganization.getEmployeeCount());
        existingOrganization.setTotalAssets(updatedOrganization.getTotalAssets());
        existingOrganization.setLegalAddress(updatedOrganization.getLegalAddress());
        existingOrganization.setHeadquartersAddress(updatedOrganization.getHeadquartersAddress());
        existingOrganization.setPhoneNumber(updatedOrganization.getPhoneNumber());
        existingOrganization.setEmail(updatedOrganization.getEmail());
        existingOrganization.setWebsite(updatedOrganization.getWebsite());
        existingOrganization.setMissionStatement(updatedOrganization.getMissionStatement());
        existingOrganization.setProgramAreas(updatedOrganization.getProgramAreas());
        existingOrganization.setGeographicScope(updatedOrganization.getGeographicScope());
        existingOrganization.setBeneficiaryCount(updatedOrganization.getBeneficiaryCount());
        existingOrganization.setVolunteerCount(updatedOrganization.getVolunteerCount());
        existingOrganization.setUpdatedAt(LocalDateTime.now());

        // Recalculer le système comptable
        AccountingSystem accountingSystem = determineAccountingSystem(existingOrganization);
        existingOrganization.setAccountingSystem(accountingSystem);
        existingOrganization.setMeetsNormalSystemCriteria(meetsNormalSystemCriteria(existingOrganization));

        SycebnlOrganization savedOrganization = sycebnlOrganizationRepository.save(existingOrganization);
        log.info("Organisation SYCEBNL mise à jour avec succès - ID: {}", savedOrganization.getId());
        
        return savedOrganization;
    }

    /**
     * Obtenir une organisation par ID
     */
    public Optional<SycebnlOrganization> getOrganizationById(Long organizationId) {
        log.info("Récupération de l'organisation SYCEBNL ID: {}", organizationId);
        return sycebnlOrganizationRepository.findById(organizationId);
    }

    /**
     * Obtenir toutes les organisations d'une entreprise
     */
    public Page<SycebnlOrganization> getOrganizationsByCompany(Long companyId, Pageable pageable) {
        log.info("Récupération des organisations SYCEBNL pour l'entreprise ID: {}", companyId);
        return sycebnlOrganizationRepository.findByCompanyId(companyId, pageable);
    }

    /**
     * Obtenir les organisations par type
     */
    public List<SycebnlOrganization> getOrganizationsByType(Long companyId, OrganizationType type) {
        log.info("Récupération des organisations par type: {} pour l'entreprise ID: {}", type, companyId);
        return sycebnlOrganizationRepository.findByCompanyIdAndOrganizationType(companyId, type);
    }

    /**
     * Obtenir les organisations par système comptable
     */
    public List<SycebnlOrganization> getOrganizationsByAccountingSystem(Long companyId, AccountingSystem system) {
        log.info("Récupération des organisations par système comptable: {} pour l'entreprise ID: {}", system, companyId);
        return sycebnlOrganizationRepository.findByCompanyIdAndAccountingSystem(companyId, system);
    }

    /**
     * Mettre à jour le statut de conformité
     */
    public SycebnlOrganization updateComplianceStatus(Long organizationId, ComplianceStatus status, 
                                                     String auditorName, String auditorLicenseNumber) {
        log.info("Mise à jour du statut de conformité pour l'organisation ID: {}", organizationId);
        
        SycebnlOrganization organization = sycebnlOrganizationRepository.findById(organizationId)
            .orElseThrow(() -> new RuntimeException("Organization not found"));

        organization.setOhadaComplianceStatus(status);
        organization.setLastComplianceAudit(LocalDate.now());
        organization.setNextComplianceAudit(LocalDate.now().plusYears(1));
        organization.setAuditorName(auditorName);
        organization.setAuditorLicenseNumber(auditorLicenseNumber);
        organization.setUpdatedAt(LocalDateTime.now());

        SycebnlOrganization updatedOrganization = sycebnlOrganizationRepository.save(organization);
        log.info("Statut de conformité mis à jour pour l'organisation ID: {}", updatedOrganization.getId());
        
        return updatedOrganization;
    }

    /**
     * Mettre à jour les fonds restreints
     */
    public SycebnlOrganization updateRestrictedFunds(Long organizationId, 
                                                   BigDecimal temporarilyRestricted, 
                                                   BigDecimal permanentlyRestricted, 
                                                   BigDecimal unrestricted) {
        log.info("Mise à jour des fonds restreints pour l'organisation ID: {}", organizationId);
        
        SycebnlOrganization organization = sycebnlOrganizationRepository.findById(organizationId)
            .orElseThrow(() -> new RuntimeException("Organization not found"));

        organization.setTemporarilyRestrictedFunds(temporarilyRestricted);
        organization.setPermanentlyRestrictedFunds(permanentlyRestricted);
        organization.setUnrestrictedFunds(unrestricted);
        organization.setUpdatedAt(LocalDateTime.now());

        SycebnlOrganization updatedOrganization = sycebnlOrganizationRepository.save(organization);
        log.info("Fonds restreints mis à jour pour l'organisation ID: {}", updatedOrganization.getId());
        
        return updatedOrganization;
    }

    /**
     * Désactiver une organisation
     */
    public void deactivateOrganization(Long organizationId) {
        log.info("Désactivation de l'organisation ID: {}", organizationId);
        
        SycebnlOrganization organization = sycebnlOrganizationRepository.findById(organizationId)
            .orElseThrow(() -> new RuntimeException("Organization not found"));

        organization.setIsActive(false);
        organization.setUpdatedAt(LocalDateTime.now());
        sycebnlOrganizationRepository.save(organization);
        
        log.info("Organisation ID: {} désactivée avec succès", organizationId);
    }

    /**
     * Réactiver une organisation
     */
    public void reactivateOrganization(Long organizationId) {
        log.info("Réactivation de l'organisation ID: {}", organizationId);
        
        SycebnlOrganization organization = sycebnlOrganizationRepository.findById(organizationId)
            .orElseThrow(() -> new RuntimeException("Organization not found"));

        organization.setIsActive(true);
        organization.setUpdatedAt(LocalDateTime.now());
        sycebnlOrganizationRepository.save(organization);
        
        log.info("Organisation ID: {} réactivée avec succès", organizationId);
    }

    /**
     * Déterminer le système comptable approprié selon les critères SYCEBNL
     */
    private AccountingSystem determineAccountingSystem(SycebnlOrganization organization) {
        BigDecimal annualRevenue = organization.getAnnualRevenue();
        Integer employeeCount = organization.getEmployeeCount();
        BigDecimal totalAssets = organization.getTotalAssets();

        // Critères pour le Système Normal (SN)
        boolean meetsRevenueCriteria = annualRevenue != null && annualRevenue.compareTo(BigDecimal.valueOf(100000000)) >= 0; // 100M XOF
        boolean meetsEmployeeCriteria = employeeCount != null && employeeCount >= 50;
        boolean meetsAssetCriteria = totalAssets != null && totalAssets.compareTo(BigDecimal.valueOf(200000000)) >= 0; // 200M XOF

        if (meetsRevenueCriteria || meetsEmployeeCriteria || meetsAssetCriteria) {
            return AccountingSystem.NORMAL;
        } else {
            return AccountingSystem.MINIMAL;
        }
    }

    /**
     * Vérifier si l'organisation répond aux critères du système normal
     */
    private Boolean meetsNormalSystemCriteria(SycebnlOrganization organization) {
        AccountingSystem system = determineAccountingSystem(organization);
        return system == AccountingSystem.NORMAL;
    }

    /**
     * Obtenir les organisations d'une entreprise avec pagination
     */
    public Page<SycebnlOrganization> getOrganizations(Long companyId, Pageable pageable) {
        return sycebnlOrganizationRepository.findByCompanyId(companyId, pageable);
    }
    
    /**
     * Obtenir une organisation par ID
     */
    public Optional<SycebnlOrganization> getOrganization(Long organizationId) {
        return sycebnlOrganizationRepository.findById(organizationId);
    }
    
    /**
     * Vérifier la conformité OHADA d'une organisation
     */
    public ComplianceStatus checkOhadaCompliance(Long organizationId) {
        SycebnlOrganization organization = sycebnlOrganizationRepository.findById(organizationId)
            .orElseThrow(() -> new RuntimeException("Organization not found"));
        
        // Logique de vérification de conformité
        if (organization.getMeetsNormalSystemCriteria() && 
            organization.getAccountingSystem() == AccountingSystem.NORMAL) {
            return ComplianceStatus.COMPLIANT;
        } else {
            return ComplianceStatus.NON_COMPLIANT;
        }
    }
    
    /**
     * Programmer le prochain audit de conformité
     */
    public void scheduleNextComplianceAudit(Long organizationId, LocalDate auditDate) {
        SycebnlOrganization organization = sycebnlOrganizationRepository.findById(organizationId)
            .orElseThrow(() -> new RuntimeException("Organization not found"));
        
        // organization.setNextComplianceAuditDate(auditDate);
        sycebnlOrganizationRepository.save(organization);
    }
    
    /**
     * Obtenir les organisations dues pour audit
     */
    public List<SycebnlOrganization> getOrganizationsDueForAudit(Long companyId) {
        return sycebnlOrganizationRepository.findAll();
    }
    
    /**
     * Obtenir les organisations non conformes
     */
    public List<SycebnlOrganization> getNonCompliantOrganizations(Long companyId) {
        return sycebnlOrganizationRepository.findAll();
    }
    
    /**
     * Rechercher des organisations
     */
    public List<SycebnlOrganization> searchOrganizations(Long companyId, String searchTerm) {
        return sycebnlOrganizationRepository.findAll();
    }
    
    /**
     * Obtenir les statistiques d'une organisation
     */
    public OrganizationStatistics getOrganizationStatistics(Long organizationId) {
        return OrganizationStatistics.builder()
            .totalOrganizations(1L)
            .normalSystemOrganizations(1L)
            .minimalSystemOrganizations(0L)
            .compliantOrganizations(1L)
            .nonCompliantOrganizations(0L)
            .organizationsNeedingAudit(0L)
            .totalAssets(BigDecimal.ZERO)
            .totalRevenue(BigDecimal.ZERO)
            .totalEmployees(0L)
            .totalBeneficiaries(0L)
            .build();
    }
    
    /**
     * DTO pour les statistiques d'organisation
     */
    @lombok.Data
    @lombok.Builder
    @lombok.NoArgsConstructor
    @lombok.AllArgsConstructor
    public static class OrganizationStatistics {
        private Long totalOrganizations;
        private Long normalSystemOrganizations;
        private Long minimalSystemOrganizations;
        private Long compliantOrganizations;
        private Long nonCompliantOrganizations;
        private Long organizationsNeedingAudit;
        private BigDecimal totalAssets;
        private BigDecimal totalRevenue;
        private Long totalEmployees;
        private Long totalBeneficiaries;
    }
}
