# Script de d√©ploiement E-COMPTA-IA avec Podman Desktop
# PowerShell Script pour Windows

Write-Host "üöÄ D√©ploiement E-COMPTA-IA INTERNATIONAL avec Podman Desktop" -ForegroundColor Green
Write-Host "=====================================================" -ForegroundColor Green

# V√©rifier que Podman est install√©
try {
    $podmanVersion = podman --version
    Write-Host "‚úÖ Podman d√©tect√©: $podmanVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Podman n'est pas install√© ou pas dans le PATH" -ForegroundColor Red
    Write-Host "Veuillez installer Podman Desktop depuis: https://podman-desktop.io/" -ForegroundColor Yellow
    exit 1
}

# V√©rifier que Podman Desktop est d√©marr√©
try {
    podman info | Out-Null
    Write-Host "‚úÖ Podman Desktop est d√©marr√©" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Podman Desktop n'est pas d√©marr√©" -ForegroundColor Red
    Write-Host "Veuillez d√©marrer Podman Desktop et r√©essayer" -ForegroundColor Yellow
    exit 1
}

# Arr√™ter et supprimer les conteneurs existants
Write-Host "üîÑ Nettoyage des conteneurs existants..." -ForegroundColor Yellow
podman-compose down --remove-orphans

# Supprimer les images existantes (optionnel)
Write-Host "üóëÔ∏è  Suppression des images existantes..." -ForegroundColor Yellow
podman rmi $(podman images -q ecomptaia-*) --force 2>$null

# Construire et d√©marrer les services
Write-Host "üî® Construction et d√©marrage des services..." -ForegroundColor Yellow
podman-compose up --build -d

# Attendre que les services soient pr√™ts
Write-Host "‚è≥ Attente du d√©marrage des services..." -ForegroundColor Yellow
Start-Sleep -Seconds 30

# V√©rifier le statut des services
Write-Host "üìä Statut des services:" -ForegroundColor Cyan
podman-compose ps

# V√©rifier la sant√© des services
Write-Host "üè• V√©rification de la sant√© des services..." -ForegroundColor Cyan

# Backend
try {
    $backendHealth = Invoke-RestMethod -Uri "http://localhost:8080/actuator/health" -Method Get -TimeoutSec 10
    Write-Host "‚úÖ Backend: $($backendHealth.status)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Backend: Service non accessible" -ForegroundColor Red
}

# Frontend
try {
    $frontendResponse = Invoke-WebRequest -Uri "http://localhost:4200" -Method Get -TimeoutSec 10
    Write-Host "‚úÖ Frontend: Service accessible (HTTP $($frontendResponse.StatusCode))" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Frontend: Service non accessible" -ForegroundColor Red
}

# Base de donn√©es
try {
    $dbHealth = podman exec ecomptaia-postgres pg_isready -U ecomptaia
    Write-Host "‚úÖ Base de donn√©es: $dbHealth" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Base de donn√©es: Service non accessible" -ForegroundColor Red
}

# Afficher les URLs d'acc√®s
Write-Host "üåê URLs d'acc√®s:" -ForegroundColor Cyan
Write-Host "   Frontend: http://localhost:4200" -ForegroundColor White
Write-Host "   Backend API: http://localhost:8080" -ForegroundColor White
Write-Host "   Prometheus: http://localhost:9090" -ForegroundColor White
Write-Host "   Grafana: http://localhost:3000 (admin/admin123)" -ForegroundColor White

Write-Host "üéâ D√©ploiement termin√©!" -ForegroundColor Green
Write-Host "Utilisez 'podman-compose logs -f' pour voir les logs en temps r√©el" -ForegroundColor Yellow
